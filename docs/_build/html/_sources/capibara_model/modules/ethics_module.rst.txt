Ethics Module
=============

This document provides an overview of the `ethics_module.py` module, which is responsible for performing ethical checks on the responses generated by the CapibaraGPT model. The module includes functionality for detecting banned words, sensitive topics, and evaluating abstract ethical concepts.

EthicsModule Class
------------------

The `EthicsModule` class manages the application of ethical checks, including the integration of the Platonic layer.

### Initialization

The class is initialized with the following parameters:

- **config** (`Dict[str, Union[List[str], float]]`): Configuration dictionary for the module.
- **use_platonic** (`bool`, optional): Indicates if the Platonic layer is active. Default is `True`.

### Methods

#### `setup()`

Sets up the `EthicsChecker` instance and checks if the module is active.

#### `toggle()`

Toggles the activation status of the ethics module.

#### `toggle_platonic()`

Toggles the activation status of the Platonic layer.

#### `check_response(response)`

Checks the response if the ethics module is active.

- **response** (`str`): The response to check.

Returns the modified response if ethical checks are active.

#### `get_status()`

Returns the current status of the ethics module and Platonic layer.

#### `is_ethical_response(response)`

Checks if the response contains banned words or sensitive topics.

- **response** (`str`): The response to check.

Returns a boolean indicating whether the response is ethical.

EthicsChecker Class
-------------------

The `EthicsChecker` class performs ethical checks on the model's responses, including Platonic concepts.

### Initialization

The class is initialized with the following parameters:

- **config** (`Dict[str, Union[List[str], float]]`): Configuration for the checker.
- **use_platonic** (`bool`, optional): Indicates if the Platonic layer is active. Default is `True`.
- **use_game_theory** (`bool`, optional): Indicates if Game Theory strategies are active. Default is `True`.

### Methods

#### `setup()`

Sets up the configuration and initializes models for ethical checks.

#### `__call__(response)`

Performs all ethical checks on the response, including Platonic concept evaluation.

- **response** (`str`): The response to check.

Returns a dictionary with the results of the checks and modified message if necessary.

#### `check_banned_words(response)`

Checks for banned words in the response.

- **response** (`str`): The response to check.

Returns a list of banned words found in the response.

#### `check_sensitive_topics(response)`

Checks for sensitive topics in the response.

- **response** (`str`): The response to check.

Returns a list of sensitive topics found in the response.

#### `check_toxicity(response)`

Checks the toxicity level of the response.

- **response** (`str`): The response to check.

Returns a boolean indicating whether the response is toxic.

#### `check_platonic_concepts(response)`

Checks the alignment of the response with ethical Platonic concepts.

- **response** (`str`): The response to check.

Returns a similarity score with Platonic concepts.

#### `check_game_theory_strategies(response)`

Checks the alignment of the response with game theory strategies.

- **response** (`str`): The response to check.

Returns a score based on game theory strategies.

Logging
-------

The module uses Python's `logging` library to log errors and other information. Ensure that the logging configuration is set up in your application to capture these logs.

```python
import logging

logger = logging.getLogger(__name__)
```

This document should be updated regularly to reflect any changes in the ethical checking logic or the addition of new features.
