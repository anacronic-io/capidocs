Generate Response Module
======================

.. module:: generate_response
   :synopsis: Response generation module for the CapibaraGPT model.

This module handles the generation of responses for the CapibaraModel model, including language detection, translation, tokenization, response generation, and layer processing.

Functions
--------

detect_and_translate_input
~~~~~~~~~~~~~~~~~~~~~~~~~

.. function:: detect_and_translate_input(user_input: str) -> str

   Detects the language of the input and translates it to English if necessary.

   :param user_input: User input text
   :type user_input: str
   :return: Input text in English
   :rtype: str

translate_response
~~~~~~~~~~~~~~~~

.. function:: translate_response(response: str, input_lang: str) -> str

   Translates the response back to the original language if necessary.

   :param response: Response text in English
   :type response: str
   :param input_lang: Original input language
   :type input_lang: str
   :return: Response text in the original language
   :rtype: str

generate_response
~~~~~~~~~~~~~~~

.. function:: generate_response(model: CapibaraModel, user_input: str, conversation_history: List[str], use_platonic: bool = True, use_game_theory: bool = True) -> str

   Generates a response based on user input and conversation history.

   :param model: Instance of the CapibaraModel model
   :type model: CapibaraModel
   :param user_input: User input text
   :type user_input: str
   :param conversation_history: History of the conversation
   :type conversation_history: List[str]
   :param use_platonic: Whether to use Platonic layer processing
   :type use_platonic: bool
   :param use_game_theory: Whether to use Game Theory layer processing
   :type use_game_theory: bool
   :return: Generated response
   :rtype: str

process_layers
~~~~~~~~~~~~

.. function:: process_layers(model, model_output, base_response, use_platonic, use_game_theory)

   Processes the base response using active layers such as Platonic and Game Theory.

   :param model: The model instance
   :type model: CapibaraModel
   :param model_output: Output from model application
   :param base_response: Base response generated by model
   :type base_response: str
   :param use_platonic: Whether to use Platonic layer
   :type use_platonic: bool
   :param use_game_theory: Whether to use Game Theory layer
   :type use_game_theory: bool
   :return: Processed response
   :rtype: str

Implementation Details
--------------------

The response generation process includes:

1. Language detection and translation
2. Input tokenization
3. Base response generation
4. Layer processing (Platonic, Game Theory)
5. Personality adjustment
6. Coherence checking
7. Translation back to original language

Dependencies
-----------

- JAX for model operations
- Logging for operation tracking
- Custom modules:
    - CapibaraModel
    - PersonalityManager
    - CoherenceDetector
    - Language utilities

Example Usage
------------

.. code-block:: python

    from capibara_model.utils.generate_response import generate_response
    
    # Initialize model and components
    model = CapibaraModel()
    
    # Generate response
    response = generate_response(
        model=model,
        user_input="¿Cómo estás?",
        conversation_history=["Hello!", "Hi there!"],
        use_platonic=True,
        use_game_theory=True
    )

See Also
--------

- :doc:`capibara_model`
- :doc:`personality_manager`
- :doc:`coherence_detector`
- :doc:`language_utils` 